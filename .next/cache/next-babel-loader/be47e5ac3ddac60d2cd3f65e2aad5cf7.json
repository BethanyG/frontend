{
  "ast": null,
  "code": "var _jsxFileName = \"/Users/angelo.cordon/workspace/codebuddies/frontend/src/components/form/Form.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\n\nconst Form = (_ref) => {\n  let {\n    defaultValues,\n    children,\n    onSubmit,\n    validationResolver\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"defaultValues\", \"children\", \"onSubmit\", \"validationResolver\"]);\n\n  const methods = useForm({\n    defaultValues,\n    validationResolver\n  });\n  const {\n    handleSubmit\n  } = methods;\n\n  const getChildElement = child => {\n    if (!child || !child.props.name) return child;\n    const {\n      control,\n      errors\n    } = methods;\n    const key = child.props.name;\n\n    const options = _objectSpread({}, _objectSpread(_objectSpread({}, child.props), {}, {\n      control,\n      errors,\n      key\n    }));\n\n    return /*#__PURE__*/React.createElement(child.type, options);\n  };\n\n  return __jsx(\"form\", _extends({\n    onSubmit: handleSubmit(onSubmit)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }), Array.isArray(children) ? children.map(getChildElement) : children);\n};\n\nForm.propTypes = {\n  defaultValues: PropTypes.object,\n  children: PropTypes.any,\n  onSubmit: PropTypes.func.isRequired,\n  validationResolver: PropTypes.func.isRequired\n};\nexport default Form;",
  "map": {
    "version": 3,
    "sources": [
      "/Users/angelo.cordon/workspace/codebuddies/frontend/src/components/form/Form.js"
    ],
    "names": [
      "React",
      "PropTypes",
      "useForm",
      "Form",
      "defaultValues",
      "children",
      "onSubmit",
      "validationResolver",
      "rest",
      "methods",
      "handleSubmit",
      "getChildElement",
      "child",
      "props",
      "name",
      "control",
      "errors",
      "key",
      "options",
      "createElement",
      "type",
      "Array",
      "isArray",
      "map",
      "propTypes",
      "object",
      "any",
      "func",
      "isRequired"
    ],
    "mappings": ";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,MAAMC,IAAI,GAAG,UAMP;AAAA,MANQ;AACZC,IAAAA,aADY;AAEZC,IAAAA,QAFY;AAGZC,IAAAA,QAHY;AAIZC,IAAAA;AAJY,GAMR;AAAA,MADDC,IACC;;AACJ,QAAMC,OAAO,GAAGP,OAAO,CAAC;AAAEE,IAAAA,aAAF;AAAiBG,IAAAA;AAAjB,GAAD,CAAvB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAmBD,OAAzB;;AAEA,QAAME,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACC,KAAN,CAAYC,IAA3B,EAAiC,OAAOF,KAAP;AACjC,UAAM;AAAEG,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAAsBP,OAA5B;AACA,UAAMQ,GAAG,GAAGL,KAAK,CAACC,KAAN,CAAYC,IAAxB;;AACA,UAAMI,OAAO,qDAAaN,KAAK,CAACC,KAAnB;AAA0BE,MAAAA,OAA1B;AAAmCC,MAAAA,MAAnC;AAA2CC,MAAAA;AAA3C,OAAb;;AACA,wBAAOjB,KAAK,CAACmB,aAAN,CAAoBP,KAAK,CAACQ,IAA1B,EAAgCF,OAAhC,CAAP;AACD,GAND;;AAQA,SACE;AAAM,IAAA,QAAQ,EAAER,YAAY,CAACJ,QAAD;AAA5B,KAA4CE,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGa,KAAK,CAACC,OAAN,CAAcjB,QAAd,IAA0BA,QAAQ,CAACkB,GAAT,CAAaZ,eAAb,CAA1B,GAA0DN,QAD7D,CADF;AAKD,CAvBD;;AAyBAF,IAAI,CAACqB,SAAL,GAAiB;AACfpB,EAAAA,aAAa,EAAEH,SAAS,CAACwB,MADV;AAEfpB,EAAAA,QAAQ,EAAEJ,SAAS,CAACyB,GAFL;AAGfpB,EAAAA,QAAQ,EAAEL,SAAS,CAAC0B,IAAV,CAAeC,UAHV;AAIfrB,EAAAA,kBAAkB,EAAEN,SAAS,CAAC0B,IAAV,CAAeC;AAJpB,CAAjB;AAOA,eAAezB,IAAf",
    "sourcesContent": [
      "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\n\nconst Form = ({\n  defaultValues,\n  children,\n  onSubmit,\n  validationResolver,\n  ...rest\n}) => {\n  const methods = useForm({ defaultValues, validationResolver });\n  const { handleSubmit } = methods;\n\n  const getChildElement = child => {\n    if (!child || !child.props.name) return child;\n    const { control, errors } = methods;\n    const key = child.props.name;\n    const options = { ...{ ...child.props, control, errors, key } };\n    return React.createElement(child.type, options);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} {...rest}>\n      {Array.isArray(children) ? children.map(getChildElement) : children}\n    </form>\n  );\n};\n\nForm.propTypes = {\n  defaultValues: PropTypes.object,\n  children: PropTypes.any,\n  onSubmit: PropTypes.func.isRequired,\n  validationResolver: PropTypes.func.isRequired,\n};\n\nexport default Form;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
